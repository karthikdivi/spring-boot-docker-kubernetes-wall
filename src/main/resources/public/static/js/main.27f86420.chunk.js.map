{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TimeAgo","addLocale","en","timeAgo","App","state","message","messages","loading","handleChange","e","console","log","target","value","_this","setState","handleSubmit","_callee","currentMessage","res","json","regenerator_default","a","wrap","_context","prev","next","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","text","sent","reverse","stop","this","_this2","messagesData","map","ele","react_default","createElement","className","key","date","format","Fragment","id","type","placeholder","required","onChange","onKeyPress","event","onClick","dist_default","name","fadeIn","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27f86420.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nimport TimeAgo from 'javascript-time-ago'\n \n// Load locale-specific relative date/time formatting rules.\nimport en from 'javascript-time-ago/locale/en'\n\nimport logo from './logo.svg';\nimport './App.css';\nimport Spinner from 'react-spinkit';\n\nTimeAgo.addLocale(en);\nconst timeAgo = new TimeAgo('en-US')\n\nclass App extends Component {\n\n  state = {\n    message : '',\n    messages: [],\n    loading: true,\n  }\n\n  async componentWillMount(){\n    let res = await fetch('/wall');\n    let json = await res.json();\n    if(json){\n      this.setState({messages: json.reverse(), loading: false});\n    }\n  }\n\n  handleChange = e => {\n    console.log(e.target.value);\n    this.setState({message: e.target.value})\n  }\n\n  handleSubmit = async () => {\n    console.log('submitting');\n    if(this.state.message){\n      let currentMessage = this.state.message;\n      this.setState({message: '', loading: true});\n      let res = await fetch('/wall', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: currentMessage\n        })\n      });\n      let json = await res.json();\n      if(json){\n        this.setState({messages: json.reverse(), loading: false});\n      }\n    }\n  };\n\n  render(){\n\n    const messagesData = this.state.messages.map(ele => \n    <div className=\"message-card\" key={ele.date}>\n      <p className=\"message-card-text\">\n        {ele.text}\n      </p>\n      <sub className=\"message-card-sub-text\">\n        {timeAgo.format(ele.date)}\n      </sub>\n      <hr/>\n    </div>);\n\n    return (\n      <>\n      <div id=\"cover\">\n          <div className=\"tb\">\n            <div className=\"td\">\n            <input \n            type=\"text\" \n            placeholder=\"Write something...\" \n            required  \n            value={this.state.message}\n            onChange={this.handleChange} \n            onKeyPress={event => {\n              if (event.key === 'Enter') {\n                this.handleSubmit()\n              }\n            }}\n            /></div>\n            <div className=\"td\" id=\"s-cover\">\n              <button onClick={this.handleSubmit}>\n                <div id=\"s-circle\"></div>\n                <span></span>\n              </button>\n            </div>\n          </div>  \n      </div>\n      <br/><br/><br/><br/>\n      <div className=\"cards\">\n        <h3>IDC Wall</h3>\n        {this.state.loading && <Spinner name=\"ball-pulse-sync\" fadeIn='none' />}\n        {messagesData}\n      </div>\n      </>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}